from django.shortcuts import render, get_object_or_404
from .models import Post
# Create your views here.
def home(request):
    # return render(request, 'index.html')#this line is just returning 'index' page. #this is a simple view and just gonna return a template 'index.html'. and this 'request' object (The 'request' object is an instance of the 'HttpRequest' class) is used to generate the respose back to the user. so now we need to build this 'idex.html' template so it can return this page called 'index.html'. so first we need to create a 'templates' folder and then we need to tell Django where that 'templates' folder is. Django by default is looking for a folder called 'templates' that er built and inside of it we gonna have a file called 'index.html'.
    #all_posts = Post.objects.all() #This is basically doing an SQL statement that select all from the post table #by importing line 2 now we can access 'Post' model and run a simple query, so let's setup a very simple query that is gonna access all the post information in the 'Post' model. now we should pass this information to the template to output them on the page ('index.html' page).
    all_posts = Post.newmanager.all() #به این می‌گن کوئری #using custom manager that by default just retun posts that are 'published' and not 'draft'. ('models.py' line 7 and 22)
    return render(request, 'index.html', {'posts': all_posts}) #در واقع از طریق یک دیکشنری اطلاعات را به تمپلیت‌مان پاس می‌دهیم   #In Django, when you use the 'render()' function, you typically pass a context as a dictionary. it's important to use a dictionary for the context rather than just passing a variable like 'all_posts' directly.
    # So what we've done is By line 6, we collect our data from the database in the 'Post' table and put it into 'all_posts' variable, and then obviously all the data is in this variable and then we're gonna pass it across to the template and referring to it as 'posts'. so now what we need to do is go to our HTML page 'index.html', and now basically we need to render out that information from what's been collected from the database and now it should be able to get access to our posts in our database and display them on our template.
    #what we need to do in our 'index.html' is to make a for loop (so we commented that 'Hello, world!' h1 element and writed our for loop there).
    #now after that we want to tackle the task of making titles of the posts showed on '127.0.0.1:8000/blog/' into links, so they go to the individual page for that particular post.We are going to create a new URL for this purpose, so when someone types in the name of for example the post like '127.0.0.1:8000/blog/slugofthepost/', that should take them to that post. for this purpose we gonna start with writing line 7 in 'urls.py' in 'blog' app.

def post_single(request, post): #this value here 'post' represents that value on 'urls.py' file (that 'post' in '<slug:post>/'). so now what we're going to do now is utilizing this information to make a query to the database. so in SQL terms the query that we're going to make is select all from 'Post' model (table) where slug is equal to whatever is in here ('post'). (but first we import "get_object_or_404" which is going to be utilized if the object doesn't exist the webpage is going to return 404)
    mypost = get_object_or_404(Post, slug=post, status='published') #this query stores that individual post into variable 'mypost' and then by next line we pass it over to our template 'single.html' #select from the database 'Post', where post equals slug
    return render(request, 'single.html', {'individualpost': mypost})  #so now we should build this 'single.html' page.